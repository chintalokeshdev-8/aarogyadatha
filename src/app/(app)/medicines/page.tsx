
'use client';

import React, { useState, useTransition } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Label } from "@/components/ui/label";
import { FlaskConical, Stethoscope, Microscope, LifeBuoy, Bell, Utensils, Award, AlarmClock, Info, Loader2, Sparkles, AlertTriangle, Pencil, PlusCircle, History, CheckCircle, XCircle, Clock, ChevronDown, ChevronUp, FileText } from "lucide-react";
import { Button } from "@/components/ui/button";
import Link from 'next/link';
import { cn } from "@/lib/utils";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogFooter, DialogClose } from '@/components/ui/dialog';
import { generateDietPlan, AiDietPlanOutput } from '@/ai/flows/ai-diet-plan';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { medicineSchedule as initialMedicineSchedule, medicineHistoryData } from '@/lib/medicines-data';
import Image from 'next/image';



const getStatusIcon = (status: string) => {
    switch (status) {
        case 'taken':
            return <CheckCircle className="h-5 w-5 text-green-500" />;
        case 'missed':
            return <XCircle className="h-5 w-5 text-red-500" />;
        case 'pending':
            return <Clock className="h-5 w-5 text-yellow-500" />;
        default:
            return null;
    }
};


const medicineAssistanceItems = [
    { href: '/medicine-assistant', icon: FlaskConical, label: 'AI Medicine Assistant' },
    { href: '#', icon: Stethoscope, label: 'Nearby Pharmacies' },
    { href: '#', icon: Microscope, label: 'Drug Interaction Check' },
    { href: '#', icon: LifeBuoy, label: 'Pharmacist Consultation' },
];

const userHealthProfile = {
    conditions: ["Fever & Cold", "Allergic Rhinitis"],
    medications: ["Paracetamol", "Cetirizine", "Metformin", "Vitamin D3"]
};

function DietPlanDialog() {
    const [isPending, startTransition] = useTransition();
    const [dietPlan, setDietPlan] = useState<AiDietPlanOutput | null>(null);

    const handleGeneratePlan = () => {
        startTransition(async () => {
            const result = await generateDietPlan(userHealthProfile);
            setDietPlan(result);
        });
    };

    return (
        <Dialog>
            <DialogTrigger asChild>
                <Button variant="link" className="p-0 h-auto mt-2 text-sm" style={{color: 'hsl(var(--nav-medicines))'}}>Get AI Diet Plan (AI డైట్ ప్లాన్ పొందండి)</Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-2xl">
                <DialogHeader>
                    <DialogTitle className="flex items-center gap-2" style={{color: 'hsl(var(--nav-medicines))'}}><Sparkles /> AI Personalized Diet Plan</DialogTitle>
                    <DialogDescription>
                        A diet plan generated by AI based on your current health profile.
                    </DialogDescription>
                </DialogHeader>
                <div className="max-h-[70vh] overflow-y-auto p-1 space-y-4">
                    {!dietPlan && !isPending && (
                        <div className="space-y-4">
                            <p className="font-semibold">Your current health profile:</p>
                            <div className="space-y-2">
                                <div>
                                    <Label>Active Conditions</Label>
                                    <div className="flex flex-wrap gap-2">
                                        {userHealthProfile.conditions.map(c => <Badge key={c} variant="outline">{c}</Badge>)}
                                    </div>
                                </div>
                                <div>
                                    <Label>Current Medications</Label>
                                    <div className="flex flex-wrap gap-2">
                                        {userHealthProfile.medications.map(m => <Badge key={m} variant="secondary">{m}</Badge>)}
                                    </div>
                                </div>
                            </div>
                            <Button onClick={handleGeneratePlan} className="w-full" style={{backgroundColor: 'hsl(var(--nav-medicines))'}}>
                                <Sparkles className="mr-2 h-4 w-4" /> Generate Plan
                            </Button>
                        </div>
                    )}
                    
                    {isPending && (
                        <div className="flex flex-col items-center justify-center h-64">
                            <Loader2 className="h-10 w-10 animate-spin text-primary mb-4" style={{color: 'hsl(var(--nav-medicines))'}}/>
                            <p className="font-semibold">Generating your personalized diet plan...</p>
                            <p className="text-sm text-muted-foreground">The AI is analyzing your profile.</p>
                        </div>
                    )}

                    {dietPlan && (
                        <div className="space-y-6">
                            {dietPlan.plan.map((meal, index) => (
                                <Card key={index} className="bg-muted/30">
                                    <CardHeader>
                                        <CardTitle className="text-lg">{meal.meal}</CardTitle>
                                    </CardHeader>
                                    <CardContent>
                                        <ul className="list-disc list-inside text-muted-foreground space-y-1 mb-3">
                                            {meal.items.map((item, i) => <li key={i}>{item}</li>)}
                                        </ul>
                                        <p className="text-sm font-semibold italic p-2 rounded-lg bg-background">
                                            <strong>Reason:</strong> {meal.reason}
                                        </p>
                                    </CardContent>
                                </Card>
                            ))}
                            <Card>
                                <CardHeader>
                                    <CardTitle className="text-lg">General Advice</CardTitle>
                                </CardHeader>
                                <CardContent>
                                     <ul className="list-disc list-inside text-muted-foreground space-y-1">
                                        {dietPlan.generalAdvice.map((item, i) => <li key={i}>{item}</li>)}
                                    </ul>
                                </CardContent>
                            </Card>
                        </div>
                    )}

                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-6">
                        <div className="flex items-start gap-3">
                            <AlertTriangle className="h-5 w-5 text-yellow-700 mt-1 flex-shrink-0"/>
                            <div>
                                <h4 className="font-semibold text-yellow-800">Disclaimer</h4>
                                <p className="text-sm text-yellow-700">
                                    This diet plan is AI-generated and for informational purposes only. It is not a substitute for professional medical advice. Always consult a qualified doctor or dietitian.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </DialogContent>
        </Dialog>
    );
}

function MedicineForm({ medicine, onSave }: { medicine?: any; onSave: (med: any) => void }) {
    const [name, setName] = useState(medicine?.name || '');
    const [teluguName, setTeluguName] = useState(medicine?.teluguName || '');
    const [use, setUse] = useState(medicine?.use || '');
    const [teluguUse, setTeluguUse] = useState(medicine?.teluguUse || '');
    const [dosage, setDosage] = useState(medicine?.dosage || '');
    const [frequency, setFrequency] = useState(medicine?.frequency || '');
    const { toast } = useToast();

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        const newMed = {
            ...medicine,
            name,
            teluguName,
            use,
            teluguUse,
            dosage,
            frequency,
            alerts: medicine?.alerts || [{ time: "9:00 AM", status: "pending" }],
        };
        onSave(newMed);
        toast({
            title: "Medicine Saved!",
            description: `${name} has been successfully saved.`,
        });
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
                <Label htmlFor="med-name">Medicine Name</Label>
                <Input id="med-name" value={name} onChange={(e) => setName(e.target.value)} placeholder="e.g., Paracetamol" required />
            </div>
            <div className="space-y-2">
                <Label htmlFor="med-telugu-name">Medicine Name (Telugu)</Label>
                <Input id="med-telugu-name" value={teluguName} onChange={(e) => setTeluguName(e.target.value)} placeholder="ఉదా., పారాసిటమాల్" />
            </div>
            <div className="space-y-2">
                <Label htmlFor="med-use">Use (English)</Label>
                <Input id="med-use" value={use} onChange={(e) => setUse(e.target.value)} placeholder="e.g., For fever and pain relief" />
            </div>
             <div className="space-y-2">
                <Label htmlFor="med-telugu-use">Use (Telugu)</Label>
                <Input id="med-telugu-use" value={teluguUse} onChange={(e) => setTeluguUse(e.target.value)} placeholder="ఉదా., జ్వరం మరియు నొప్పి నివారణకు" />
            </div>
            <div className="space-y-2">
                <Label htmlFor="med-dosage">Dosage</Label>
                <Input id="med-dosage" value={dosage} onChange={(e) => setDosage(e.target.value)} placeholder="e.g., 500mg" />
            </div>
            <div className="space-y-2">
                <Label htmlFor="med-frequency">Frequency</Label>
                <Input id="med-frequency" value={frequency} onChange={(e) => setFrequency(e.target.value)} placeholder="e.g., Twice a day" />
            </div>
            <DialogFooter>
                <DialogClose asChild>
                    <Button type="submit" style={{ backgroundColor: 'hsl(var(--nav-medicines))' }}>Save Changes</Button>
                </DialogClose>
            </DialogFooter>
        </form>
    );
}

export default function MyMedicinesPage() {
    const [medicineSchedule, setMedicineSchedule] = useState(initialMedicineSchedule);
    const [editingMedicine, setEditingMedicine] = useState<any | null>(null);
    const [isFormOpen, setIsFormOpen] = useState(false);

    const handleSaveMedicine = (med: any) => {
        if (editingMedicine) {
            setMedicineSchedule(medicineSchedule.map(m => m.name === editingMedicine.name ? med : m));
        } else {
            setMedicineSchedule([...medicineSchedule, med]);
        }
        setEditingMedicine(null);
        setIsFormOpen(false);
    };
    
    const toggleAlertStatus = (medName: string, alertTime: string) => {
        setMedicineSchedule(schedule =>
            schedule.map(med => {
                if (med.name === medName) {
                    return {
                        ...med,
                        alerts: med.alerts.map(alert => {
                            if (alert.time === alertTime) {
                                const newStatus = alert.status === 'taken' ? 'pending' : 'taken';
                                return { ...alert, status: newStatus };
                            }
                            return alert;
                        }),
                    };
                }
                return med;
            })
        );
    };

    const openEditDialog = (med: any) => {
        setEditingMedicine(med);
        setIsFormOpen(true);
    };

    const openAddDialog = () => {
        setEditingMedicine(null);
        setIsFormOpen(true);
    };

    return (
        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
            <div className="space-y-8">
                <div className="text-left">
                    <h1 className="text-3xl font-bold" style={{color: 'hsl(var(--nav-medicines))'}}>My Medicines</h1>
                    <p className="text-muted-foreground">Your daily medication schedule and recovery plan.</p>
                </div>
                
                <div className="grid lg:grid-cols-3 gap-8 items-start">
                    <div className="lg:col-span-2 space-y-8">
                        <Card>
                            <CardHeader>
                                <div className="flex justify-between items-start">
                                    <div>
                                        <CardTitle className="text-xl">Current Prescription (Follow-up 2)</CardTitle>
                                        <div className="flex items-center gap-2 mt-1">
                                            <Badge className="bg-green-100 text-green-800">Active</Badge> 
                                            <CardDescription>Started on Jul 15, 2024</CardDescription>
                                        </div>
                                    </div>
                                    <Button variant="outline" onClick={openAddDialog}>
                                        <PlusCircle className="mr-2 h-4 w-4" /> Add Medicine
                                    </Button>
                                </div>
                            </CardHeader>
                            <CardContent>
                                <div className="space-y-4">
                                    {medicineSchedule.map((med, index) => (
                                        <div key={index} className='p-4 rounded-lg bg-muted/30 border'>
                                            <div className="flex items-start justify-between gap-4">
                                                <div className='flex-1'>
                                                    <div className="flex items-baseline gap-2">
                                                        <p className="font-extrabold text-xl">{med.name}</p>
                                                        <p className="font-bold text-lg text-muted-foreground">{med.teluguName}</p>
                                                    </div>
                                                    <div className="font-semibold text-sm text-muted-foreground flex items-center gap-1.5 mt-1">
                                                        <Info className="h-4 w-4" />
                                                        <div>
                                                            <p>{med.use}</p>
                                                            <p className="text-sm">{med.teluguUse}</p>
                                                        </div>
                                                    </div>
                                                    <p className="text-sm text-muted-foreground mt-2 font-semibold">{med.dosage} • {med.frequency}</p>
                                                </div>
                                                <div className="flex flex-col items-end gap-2">
                                                     <Image src={med.image} alt={med.name} width={64} height={64} data-ai-hint={med.dataAiHint} className="rounded-md border-2 border-background" />
                                                     <Button variant="ghost" size="icon" className="h-8 w-8 -mr-2" onClick={() => openEditDialog(med)}>
                                                        <Pencil className="h-4 w-4 text-muted-foreground"/>
                                                    </Button>
                                                </div>
                                            </div>
                                            <div className="flex flex-wrap gap-2 mt-4">
                                                {med.alerts.map(alert => (
                                                    <Badge 
                                                        key={alert.time}
                                                        onClick={() => toggleAlertStatus(med.name, alert.time)}
                                                        className={cn("text-base px-3 py-1 cursor-pointer transition-colors", {
                                                            "bg-green-100 text-green-800 hover:bg-green-200 border-green-200": alert.status === 'taken',
                                                            "bg-red-100 text-red-800 hover:bg-red-200 border-red-200": alert.status === 'missed',
                                                            "bg-muted text-muted-foreground hover:bg-muted/80 border": alert.status === 'pending'
                                                        })}
                                                    >
                                                        {alert.time}
                                                    </Badge>
                                                ))}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </CardContent>
                        </Card>

                        <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2 text-2xl"><History /> Medication History</CardTitle>
                                <CardDescription>Your adherence record over the last few days.</CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-3">
                                {medicineHistoryData.map((day, index) => (
                                    <Collapsible key={index} className="border rounded-lg">
                                        <CollapsibleTrigger className="w-full p-4 hover:bg-muted/50 transition-colors flex items-center justify-between">
                                            <div className="text-left">
                                                <p className="text-lg font-bold">{day.date}</p>
                                                <p className="text-sm font-semibold text-muted-foreground">{day.summary}</p>
                                            </div>
                                            <ChevronDown className="h-5 w-5 transition-transform duration-200 [&[data-state=open]]:rotate-180" />
                                        </CollapsibleTrigger>
                                        <CollapsibleContent className="p-4 border-t space-y-4">
                                            {day.medicines.map((med, medIndex) => (
                                                <div key={medIndex}>
                                                    <p className="font-bold text-base">{med.name}</p>
                                                    {med.alerts.length > 0 ? (
                                                        <div className="flex flex-wrap items-center gap-4 mt-2">
                                                            {med.alerts.map((alert, alertIndex) => (
                                                                <div key={alertIndex} className="flex items-center gap-2">
                                                                    {getStatusIcon(alert.status)}
                                                                    <span className="font-semibold text-sm">{alert.time}</span>
                                                                    <span className="text-sm text-muted-foreground capitalize">({alert.status})</span>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    ) : (
                                                        <p className="text-sm text-muted-foreground mt-1">No doses scheduled on this day.</p>
                                                    )}
                                                </div>
                                            ))}
                                        </CollapsibleContent>
                                    </Collapsible>
                                ))}
                            </CardContent>
                        </Card>
                    </div>

                    <div className="space-y-8">
                        <Card>
                            <CardHeader>
                                <CardTitle>Diet & Recovery Plan (ఆహారం & కోలుకునే ప్రణాళిక)</CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-6">
                                <div>
                                    <Label>Recovery Probability (కోలుకునే సంభావ్యత)</Label>
                                    <div className="flex items-center gap-2 mt-1">
                                        <Progress value={85} className="w-full" />
                                        <span className="font-bold" style={{color: 'hsl(var(--nav-medicines))'}}>85%</span>
                                    </div>
                                </div>
                                <div>
                                    <h3 className="font-semibold flex items-center gap-2 mb-2"><Utensils style={{color: 'hsl(var(--nav-medicines))'}}/> Recommended Diet (సిఫార్సు చేయబడిన ఆహారం)</h3>
                                    <div className="text-sm text-muted-foreground p-3 bg-muted/40 rounded-lg space-y-1">
                                        <p>• This is a general diet plan.</p>
                                        <p>• Get a personalized AI plan for better results.</p>
                                    </div>
                                    <DietPlanDialog />
                                </div>
                            </CardContent>
                        </Card>
                        
                        <Card>
                            <CardHeader><CardTitle>Medicine Assistance</CardTitle></CardHeader>
                            <CardContent className="space-y-3">
                            {medicineAssistanceItems.map((item) => (
                                <Link key={item.label} href={item.href} passHref>
                                    <Button variant="outline" className="w-full justify-start gap-3">
                                        <item.icon className="h-5 w-5" style={{color: 'hsl(var(--nav-medicines))'}} />
                                        <span>{item.label}</span>
                                    </Button>
                                </Link>
                            ))}
                            </CardContent>
                        </Card>
                    </div>
                </div>
            </div>

            <DialogContent>
                <DialogHeader>
                    <DialogTitle>{editingMedicine ? 'Edit Medicine' : 'Add New Medicine'}</DialogTitle>
                    <DialogDescription>
                        {editingMedicine ? 'Update the details for your medication.' : 'Manually add a new medicine to your schedule.'}
                    </DialogDescription>
                </DialogHeader>
                <MedicineForm medicine={editingMedicine} onSave={handleSaveMedicine} />
            </DialogContent>
        </Dialog>
    );
}
